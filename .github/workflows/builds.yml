name: GitHub Builds

on: [push, pull_request]

env:
  NIX_COMPILE_FLAGS: -Wall -Wextra -pedantic -Werror
  MSVC_COMPILE_FLAGS: /W4 /WX

jobs:
  ubuntu-cmake-arm64-test:

    runs-on: ubuntu-18.04
    
    steps:
      - uses: actions/checkout@v2.1.0
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu18.04
          
          shell: /bin/sh
          
          setup: |
            mkdir -p "${PWD}/artifacts"

          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
            
          install: |
            apt-get update -q -y
            apt-get install -q -y libudev-dev pkg-config
            cd ~
            
          run: |
            dpkg -L libudev-dev

      - name: Get the output
        # Echo the `uname` output parameter from the `runcmd` step
        run: |
          echo "The uname output was ${{ steps.runcmd.outputs.uname }}"
          
  ubuntu-cmake-arm64:

    runs-on: ubuntu-18.04
    
    steps:
      - uses: actions/checkout@v2.1.0
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu18.04
          
          shell: /bin/sh
          
          setup: |
            mkdir -p "${PWD}/artifacts"

          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
            
          install: |
            apt-get update -q -y
            apt-get install -q -y libudev-dev libusb-1.0-0-dev python3-pip ninja-build git cmake pkg-config
            cd ~
            pip3 install meson
            
          run: |
            rm -rf build install
            cmake -B build/shared -S . -DCMAKE_INSTALL_PREFIX=install/shared
            make install
            meson setup build_meson .
            cd build_meson
            ninja
            cp "subprojects/hidapi_build_cmake/libhidapi_hidraw.so" "/artifacts/libhidapi_hidraw.so"
            cp "/lib/aarch64-linux-gnu/libudev.so" "/artifacts/libudev.so"

      - name: Get the output
        # Echo the `uname` output parameter from the `runcmd` step
        run: |
          echo "The uname output was ${{ steps.runcmd.outputs.uname }}"
      - name: Check artifacts
        uses: andstor/file-existence-action@v1
        with:
          files:  "artifacts/libhidapi_hidraw.so, \
                   artifacts/libudev.so"
          allow_failure: true
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: hidapi-linux-arm64
          path: artifacts/
          retention-days: ${{ (github.event_name == 'pull_request' || github.ref_name != 'master') && 7 || 90 }}
          
      
          
          
  ubuntu-cmake-x64:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        path: hidapisrc
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install libudev-dev libusb-1.0-0-dev python3-pip ninja-build
        sudo -H pip3 install meson
    - name: Configure CMake
      run: |
        rm -rf build install
        cmake -B build/shared -S hidapisrc -DCMAKE_INSTALL_PREFIX=install/shared -DHIDAPI_BUILD_HIDTEST=ON "-DCMAKE_C_FLAGS=${NIX_COMPILE_FLAGS}"
        cmake -B build/static -S hidapisrc -DCMAKE_INSTALL_PREFIX=install/static -DBUILD_SHARED_LIBS=FALSE -DHIDAPI_BUILD_HIDTEST=ON "-DCMAKE_C_FLAGS=${NIX_COMPILE_FLAGS}"
    - name: Build CMake Shared
      working-directory: build/shared
      run: make install
    - name: Build CMake Static
      working-directory: build/static
      run: make install
    - name: Check artifacts
      uses: andstor/file-existence-action@v1
      with:
        files: "install/shared/lib/libhidapi-libusb.so, \
                install/shared/lib/libhidapi-hidraw.so, \
                install/shared/include/hidapi/hidapi.h, \
                install/shared/include/hidapi/hidapi_libusb.h, \
                install/static/lib/libhidapi-libusb.a, \
                install/static/lib/libhidapi-hidraw.a, \
                install/static/include/hidapi/hidapi.h, \
                install/static/include/hidapi/hidapi_libusb.h"
        allow_failure: true
    - name: Check Meson build
      run: |
        meson setup build_meson hidapisrc
        cd build_meson
        ninja
    - name: Gather artifacts
      run: |
        mkdir artifacts
        cp "install/shared/lib/libhidapi-libusb.so" "artifacts"
        cp "install/shared/lib/libhidapi-hidraw.so" "artifacts"
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: hidapi-linux
        path: artifacts/
        retention-days: ${{ (github.event_name == 'pull_request' || github.ref_name != 'master') && 7 || 90 }}
  windows-cmake:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        path: hidapisrc
    - name: Install dependencies
      run: |
        choco install ninja
        pip3 install meson
        refreshenv
    - name: Configure CMake MSVC
      shell: cmd
      run: |
        cmake -B build\msvc -S hidapisrc -DCMAKE_INSTALL_PREFIX=install\msvc -DHIDAPI_BUILD_HIDTEST=ON "-DCMAKE_C_FLAGS=%MSVC_COMPILE_FLAGS%"
    - name: Build CMake MSVC
      working-directory: build/msvc
      run: cmake --build . --target install
    - name: Check artifacts MSVC
      uses: andstor/file-existence-action@v1
      with:
        files: "install/msvc/lib/hidapi.lib, \
                install/msvc/bin/hidapi.dll, \
                install/msvc/include/hidapi/hidapi.h, \
                install/msvc/include/hidapi/hidapi_winapi.h"
        allow_failure: true

    - name: Configure CMake NMake
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        cmake -G"NMake Makefiles" -B build\nmake -S hidapisrc -DCMAKE_INSTALL_PREFIX=install\nmake -DHIDAPI_BUILD_HIDTEST=ON "-DCMAKE_C_FLAGS=%MSVC_COMPILE_FLAGS%"
    - name: Build CMake NMake
      working-directory: build\nmake
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        nmake install
    - name: Check artifacts NMake
      uses: andstor/file-existence-action@v1
      with:
        files: "install/nmake/lib/hidapi.lib, \
                install/nmake/bin/hidapi.dll, \
                install/nmake/include/hidapi/hidapi.h, \
                install/nmake/include/hidapi/hidapi_winapi.h"
        allow_failure: true

    - name: Configure CMake MinGW
      shell: cmd
      run: |
        cmake -G"MinGW Makefiles" -B build\mingw -S hidapisrc -DCMAKE_INSTALL_PREFIX=install\mingw -DHIDAPI_BUILD_HIDTEST=ON "-DCMAKE_C_FLAGS=%NIX_COMPILE_FLAGS%"
    - name: Build CMake MinGW
      working-directory: build\mingw
      run: cmake --build . --target install
    - name: Check artifacts MinGW
      uses: andstor/file-existence-action@v1
      with:
        files: "install/mingw/lib/libhidapi.dll.a, \
                install/mingw/bin/libhidapi.dll, \
                install/mingw/include/hidapi/hidapi.h, \
                install/mingw/include/hidapi/hidapi_winapi.h"
        allow_failure: true

    - name: Check Meson build
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        meson setup build_meson hidapisrc
        cd build_meson
        ninja
